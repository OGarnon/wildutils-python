name: CI-CD Pipeline

on:
  push:
    branches:
      - main  # Trigger only on push to the main branch

jobs:
  build-and-publish:
    runs-on: ubuntu-latest  # GitHub-hosted Ubuntu runner

    steps:
      # 📥 Step 1: Checkout the code from the repo
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Ensures full history is available (useful for logs/tags)

      # 🧪 Step 2: Install dependencies and run tests
      - name: Install Dependencies & Run Tests
        run: |
          pip install -r requirements.txt
          pytest  # Replace with your test suite as needed

      # 🧹 Step 3: Lint the code using flake8
      #- name: Run Linter
       # run: |
        #  pip install flake8
         # flake8 .

      # 🔧 Step 4: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 🔐 Step 5: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 🏗️ Step 6: Build the Docker image with caching
      - name: Build Docker Image
        run: |
          docker buildx build \
            --load \
            --cache-from=type=gha \
            --cache-to=type=gha,mode=max \
            -t wildutils-python-app:test .

      # 📤 Step 7: Push the Docker image with "latest" tag
      - name: Push Docker Image (latest tag)
        run: |
          docker tag wildutils-python-app:test ogranon/wildutils-python-app:latest
          docker push ogranon/wildutils-python-app:latest

      # 🔎 Step 8: Check if SSH key is set before deploy
      - name: Check if Deploy Should Run
        id: check_ssh
        run: |
          if [ -z "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          else
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          fi

      # 🚀 Step 9: Deploy to Remote Server using SSH (only if SSH key is present)
      - name: Deploy to Remote Server (via SSH)
        if: steps.check_ssh.outputs.should_deploy == 'true'
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            docker pull ogranon/wildutils-python-app:latest
            docker stop wildutils || true
            docker rm wildutils || true
            docker run -d --name wildutils -p 80:80 ogranon/wildutils-python-app:latest
